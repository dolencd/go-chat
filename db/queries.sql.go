// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO app_user (
  id, username, email
) VALUES ($1, $2, $3)
RETURNING id, username, email
`

type CreateUserParams struct {
	ID       pgtype.UUID
	Username string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Username, arg.Email)
	var i AppUser
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM app_user
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email FROM app_user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i AppUser
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email FROM app_user
`

func (q *Queries) GetUsers(ctx context.Context) ([]AppUser, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppUser
	for rows.Next() {
		var i AppUser
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE app_user
  set username = $2,
  email = $3
WHERE id = $1
`

type UpdateUserParams struct {
	ID       pgtype.UUID
	Username string
	Email    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Username, arg.Email)
	return err
}
